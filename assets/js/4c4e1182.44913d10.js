"use strict";(self.webpackChunksuse_edge_docs=self.webpackChunksuse_edge_docs||[]).push([[33],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>h});var r=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function n(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?n(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,r,a=function(e,t){if(null==e)return{};var i,r,a={},n=Object.keys(e);for(r=0;r<n.length;r++)i=n[r],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)i=n[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var i=e.components,a=e.mdxType,n=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(i),d=a,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||n;return i?r.createElement(h,o(o({ref:t},u),{},{components:i})):r.createElement(h,o({ref:t},u))}));function h(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=i.length,o=new Array(n);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<n;c++)o[c]=i[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,i)}d.displayName="MDXCreateElement"},2291:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var r=i(7462),a=(i(7294),i(3905));const n={sidebar_position:1,title:"SLE Micro on X86_86 on libvirt (KCLI)"},o="Intro",l={unversionedId:"quickstart/slemicro-kcli-x86_64",id:"quickstart/slemicro-kcli-x86_64",title:"SLE Micro on X86_86 on libvirt (KCLI)",description:"Libvirtd",source:"@site/docs/quickstart/slemicro-kcli-x86_64.md",sourceDirName:"quickstart",slug:"/quickstart/slemicro-kcli-x86_64",permalink:"/quickstart/slemicro-kcli-x86_64",draft:!1,editUrl:"https://github.com/suse-edge/suse-edge.github.io/tree/main/docs/quickstart/slemicro-kcli-x86_64.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"SLE Micro on X86_86 on libvirt (KCLI)"},sidebar:"docs",previous:{title:"Overview",permalink:"/"},next:{title:"SLE Micro on OSX on Apple Silicon (UTM)",permalink:"/quickstart/slemicro-utm-aarch64"}},s={},c=[{value:"Libvirtd",id:"libvirtd",level:2},{value:"KCLI",id:"kcli",level:2},{value:"KCLI Installation",id:"kcli-installation",level:2},{value:"Convert the raw image to qcow2",id:"convert-the-raw-image-to-qcow2",level:2},{value:"Move the image to libvirtd images folder",id:"move-the-image-to-libvirtd-images-folder",level:2},{value:"Create the VM",id:"create-the-vm",level:2},{value:"Access to the vm",id:"access-to-the-vm",level:2},{value:"Delete the VM",id:"delete-the-vm",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...i}=e;return(0,a.kt)(p,(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intro"},"Intro"),(0,a.kt)("h2",{id:"libvirtd"},"Libvirtd"),(0,a.kt)("p",null,"The libvirtd program is the server side daemon component of the libvirt virtualization management system.\nThis daemon runs on host servers and performs required management tasks for virtualized guests. This includes activities such as starting, stopping and migrating guests between host servers, configuring and manipulating networking, and managing storage for use by guests.\nThe libvirt client libraries and utilities connect to this daemon to issue tasks and collect information about the configuration and resources of the host system and guests.\n(see ",(0,a.kt)("a",{parentName:"p",href:"https://libvirt.org/manpages/libvirtd.html"},"https://libvirt.org/manpages/libvirtd.html"),")"),(0,a.kt)("h2",{id:"kcli"},"KCLI"),(0,a.kt)("p",null,"This tool is meant to ease interaction with the following virtualization providers:\nLibvirt/Vsphere/Kubevirt/Aws/Gcp/Ibmcloud/oVirt/Openstack/Packet"),(0,a.kt)("p",null,"You can:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Manage vms (create/delete/list/info/ssh/start/stop/console/serialconsole/webconsole/create or delete disk/create or delete nic/clone/snapshot)"),(0,a.kt)("li",{parentName:"ul"},"Deploy them using profiles"),(0,a.kt)("li",{parentName:"ul"},"Define more complex workflows using plans and products.")),(0,a.kt)("p",null,"Kubernetes clusters can also be deployed with the following type:"),(0,a.kt)("p",null,"Kubeadm/Openshift/OKD/Hypershift/Microshift/K3s/Kind"),(0,a.kt)("p",null,"To see more details about KCLI, please visit ",(0,a.kt)("a",{parentName:"p",href:"https://kcli.readthedocs.io/en/latest/index.html"},"https://kcli.readthedocs.io/en/latest/index.html")),(0,a.kt)("h2",{id:"kcli-installation"},"KCLI Installation"),(0,a.kt)("p",null,"A generic script is provided for installation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://raw.githubusercontent.com/karmab/kcli/main/install.sh | sudo bash\n")),(0,a.kt)("p",null,"Maybe you need to create network pool and the storage pool the first time:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kcli create pool -p /var/lib/libvirt/images -n default\n")),(0,a.kt)("p",null,"For more details, please visit ",(0,a.kt)("a",{parentName:"p",href:"https://kcli.readthedocs.io/en/latest/installation.html"},"https://kcli.readthedocs.io/en/latest/installation.html")),(0,a.kt)("h1",{id:"image-based-process-step-by-step"},"Image-based process step by step"),(0,a.kt)("p",null,"We have to create the image based and prepare the image with ignition and combustion files.\nBasically we will use the following documents as reference to create the image changing the base SLEMicro image to be downloaded (",(0,a.kt)("strong",{parentName:"p"},"in this case will be SLE Micro x86_64"),"):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Prerequisites: ",(0,a.kt)("a",{parentName:"li",href:"https://suse-edge.github.io/quickstart/slemicro-utm-aarch64#prerequisites"},"https://suse-edge.github.io/quickstart/slemicro-utm-aarch64#prerequisites"),"  (Remember to download the x86_64 image)"),(0,a.kt)("li",{parentName:"ul"},"Image preparation: ",(0,a.kt)("a",{parentName:"li",href:"https://suse-edge.github.io/quickstart/slemicro-utm-aarch64#image-preparation"},"https://suse-edge.github.io/quickstart/slemicro-utm-aarch64#image-preparation")),(0,a.kt)("li",{parentName:"ul"},"Ignition & Combustion files: ",(0,a.kt)("a",{parentName:"li",href:"https://suse-edge.github.io/quickstart/slemicro-utm-aarch64#ignition--combustion-files"},"https://suse-edge.github.io/quickstart/slemicro-utm-aarch64#ignition--combustion-files"))),(0,a.kt)("p",null,"After following the previous steps, at this point you should have a folder with the following files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"slemicro.raw (SLE-Micro.x86_64-5.4.0-Default-GM.raw)"),(0,a.kt)("li",{parentName:"ul"},"ignition-and-combustion.iso")),(0,a.kt)("p",null,"The base image SLE Micro with the customization based on ignition and combustion."),(0,a.kt)("h2",{id:"convert-the-raw-image-to-qcow2"},"Convert the raw image to qcow2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"qemu-img convert -O qcow2 SLE-Micro.x86_64-5.4.0-Default-GM.raw slemicro\n")),(0,a.kt)("h2",{id:"move-the-image-to-libvirtd-images-folder"},"Move the image to libvirtd images folder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mv slemicro /var/lib/libvirt/images/\n")),(0,a.kt)("h2",{id:"create-the-vm"},"Create the VM"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kcli create vm -i slemicro -P cloudinit=false -P iso=ignition-and-combustion.iso\n")),(0,a.kt)("p",null,"After a couple of seconds, the VM will boot up and will configure itself\nusing the ignition and combustion scripts, including registering itself\nto SCC"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kcli list vm \n+-------------------------+--------+-----------------+----------+-------+----------+\n|           Name          | Status |        Ip       |  Source  |  Plan | Profile  |\n+-------------------------+--------+-----------------+----------+-------+----------+\n| distracted-duncanmcleod |   up   | 192.168.122.233 | slemicro | kvirt | slemicro |\n+-------------------------+--------+-----------------+----------+-------+----------+\n")),(0,a.kt)("h2",{id:"access-to-the-vm"},"Access to the vm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kcli ssh distracted-duncanmcleod\n")),(0,a.kt)("p",null,"or using ssh directly and the user set in the ignition file (in this case root)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ssh root@192.168.122.233\n")),(0,a.kt)("h2",{id:"delete-the-vm"},"Delete the VM"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kcli delete vm distracted-duncanmcleod\n")))}m.isMDXComponent=!0}}]);