"use strict";(self.webpackChunksuse_edge_docs=self.webpackChunksuse_edge_docs||[]).push([[897],{58:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(5893),n=t(1151);const o={sidebar_position:5,title:"Cluster API core concepts"},i="Cluster API core concepts",a={id:"misc/cluster-api-concepts",title:"Cluster API core concepts",description:"Intro",source:"@site/docs/misc/cluster-api-concepts.md",sourceDirName:"misc",slug:"/misc/cluster-api-concepts",permalink:"/docs/misc/cluster-api-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/suse-edge/suse-edge.github.io/tree/main/docs/misc/cluster-api-concepts.md",tags:[],version:"current",lastUpdatedBy:"Atanas Dinov",lastUpdatedAt:1695714720,formattedLastUpdatedAt:"Sep 26, 2023",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Cluster API core concepts"},sidebar:"docs",previous:{title:"Running sushy-emulator as a container on SLES/openSUSE",permalink:"/docs/misc/sushy-emulator-sles-certificates-container"},next:{title:"Create a package (RPM or Container image) using OBS (openSUSE Build Service)",permalink:"/docs/dev_howto/create-package-obs"}},c={},l=[{value:"Intro",id:"intro",level:2},{value:"Cluster types",id:"cluster-types",level:2},{value:"Management Cluster",id:"management-cluster",level:3},{value:"Workload Cluster",id:"workload-cluster",level:3},{value:"Providers",id:"providers",level:2},{value:"Infrastructure Provider",id:"infrastructure-provider",level:3},{value:"Bootstrap Provider",id:"bootstrap-provider",level:3}];function d(e){const r={a:"a",blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"cluster-api-core-concepts",children:"Cluster API core concepts"}),"\n",(0,s.jsx)(r.h2,{id:"intro",children:"Intro"}),"\n",(0,s.jsxs)(r.p,{children:["Via the ",(0,s.jsx)(r.a,{href:"https://cluster-api.sigs.k8s.io/",children:"official docs"}),":"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"Cluster API is a Kubernetes sub-project focused on providing declarative APIs and tooling\nto simplify provisioning, upgrading, and operating multiple Kubernetes clusters."}),"\n",(0,s.jsx)(r.p,{children:"Started by the Kubernetes Special Interest Group (SIG) Cluster Lifecycle,\nthe Cluster API project uses Kubernetes-style APIs and patterns\nto automate cluster lifecycle management for platform operators.\nThe supporting infrastructure, like virtual machines, networks, load balancers, and VPCs,\nas well as the Kubernetes cluster configuration are all defined in the same way\nthat application developers operate deploying and managing their workloads.\nThis enables consistent and repeatable cluster deployments across a wide variety of infrastructure environments."}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"cluster-types",children:"Cluster types"}),"\n",(0,s.jsx)(r.h3,{id:"management-cluster",children:"Management Cluster"}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.em,{children:"Management"})," cluster manages the state and lifecycle of ",(0,s.jsx)(r.em,{children:"Workload"})," clusters using components called providers.\nEach Management cluster stores and reconciles the Cluster API resources (e.g. Machine, MachineDeployment, etc.)\nof Workload clusters by running one or more providers."]}),"\n",(0,s.jsx)(r.h3,{id:"workload-cluster",children:"Workload Cluster"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.em,{children:"Workload"})," clusters, as the name suggests, are used to run and orchestrate the application workloads of the user.\nWorkload clusters, in the context of Cluster API, are always managed by a Management cluster."]}),"\n",(0,s.jsx)(r.h2,{id:"providers",children:"Providers"}),"\n",(0,s.jsx)(r.h3,{id:"infrastructure-provider",children:"Infrastructure Provider"}),"\n",(0,s.jsx)(r.p,{children:"Infrastructure providers are responsible for provisioning the necessary infrastructure and compute resources.\nEach node, regardless of its type (e.g. a VM or baremetal), requires specific configuration options\nwhich these providers use during the provisioning process e.g. OS image and checksum, network settings, etc."}),"\n",(0,s.jsxs)(r.p,{children:["A popular and widely adopted baremetal infrastructure provider is the\n",(0,s.jsx)(r.a,{href:"https://github.com/metal3-io/cluster-api-provider-metal3",children:"CAPM3"})," project (Cluster API Provider Metal\xb3).\nIt enables users to deploy a Cluster API based cluster using Metal3."]}),"\n",(0,s.jsx)(r.h3,{id:"bootstrap-provider",children:"Bootstrap Provider"}),"\n",(0,s.jsx)(r.p,{children:"Bootstrap providers are responsible for turning a fully provisioned server into a Kubernetes node.\nThis includes, but is not limited to, configuring, initializing and joining control plane and worker nodes,\ngenerating kubeconfig and cluster certificates, etc."}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.a,{href:"https://github.com/rancher-sandbox/cluster-api-provider-rke2/",children:"CAPRKE2"})," project\n(Cluster API Provider RKE2) aims to provide both Control Plane and Bootstrap providers for RKE2 based clusters.\nIt is currently in early development by the Rancher team."]})]})}function u(e={}){const{wrapper:r}={...(0,n.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>a,a:()=>i});var s=t(7294);const n={},o=s.createContext(n);function i(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);