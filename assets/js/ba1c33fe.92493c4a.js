"use strict";(self.webpackChunksuse_edge_docs=self.webpackChunksuse_edge_docs||[]).push([[3663],{8041:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=i(5893),t=i(1151);const o={title:"SLE Micro on X86_64 on libvirt (virt-install)"},r="Intro",l={id:"demo_setup/slemicro-virt-install-x86_64",title:"SLE Micro on X86_64 on libvirt (virt-install)",description:"Libvirtd",source:"@site/docs/demo_setup/slemicro-virt-install-x86_64.md",sourceDirName:"demo_setup",slug:"/demo_setup/slemicro-virt-install-x86_64",permalink:"/docs/demo_setup/slemicro-virt-install-x86_64",draft:!1,unlisted:!1,editUrl:"https://github.com/suse-edge/suse-edge.github.io/tree/main/docs/demo_setup/slemicro-virt-install-x86_64.md",tags:[],version:"current",lastUpdatedBy:"Andrew Gracey",lastUpdatedAt:1701811074,formattedLastUpdatedAt:"Dec 5, 2023",frontMatter:{title:"SLE Micro on X86_64 on libvirt (virt-install)"},sidebar:"docs",previous:{title:"SLE Micro on OSX on Apple Silicon (UTM)",permalink:"/docs/demo_setup/slemicro-utm-aarch64"},next:{title:"Standalone Clusters with Edge Image Builder",permalink:"/docs/quickstart/eib"}},a={},c=[{value:"Libvirtd",id:"libvirtd",level:2},{value:"Virt-install",id:"virt-install",level:2},{value:"Convert the raw image to qcow2",id:"convert-the-raw-image-to-qcow2",level:2},{value:"Ignition &amp; Combustion files",id:"ignition--combustion-files",level:2},{value:"Create the VM",id:"create-the-vm",level:2},{value:"Access to the vm",id:"access-to-the-vm",level:2},{value:"Delete the VM",id:"delete-the-vm",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"intro",children:"Intro"}),"\n",(0,s.jsx)(n.h2,{id:"libvirtd",children:"Libvirtd"}),"\n",(0,s.jsxs)(n.p,{children:["The libvirtd program is the server side daemon component of the libvirt virtualization management system.\nThis daemon runs on host servers and performs required management tasks for virtualized guests. This includes activities such as starting, stopping and migrating guests between host servers, configuring and manipulating networking, and managing storage for use by guests.\nThe libvirt client libraries and utilities connect to this daemon to issue tasks and collect information about the configuration and resources of the host system and guests.\n(see ",(0,s.jsx)(n.a,{href:"https://libvirt.org/manpages/libvirtd.html",children:"https://libvirt.org/manpages/libvirtd.html"}),")"]}),"\n",(0,s.jsx)(n.h2,{id:"virt-install",children:"Virt-install"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"virt-install"}),' is a command line tool for creating new KVM , Xen, or Linux container guests using the "libvirt" hypervisor management library. See the EXAMPLES section at the end of this document to quickly get started.\n',(0,s.jsx)(n.code,{children:"virt-install"})," tool supports both text based & graphical installations, using VNC or SDL graphics, or a text serial console. The guest can be configured to use one or more virtual disks, network interfaces, audio devices, physical USB or PCI devices, among others.\nThe installation media can be held locally or remotely on NFS , HTTP , FTP servers. In the latter case ",(0,s.jsx)(n.code,{children:"virt-install"})," will fetch the minimal files necessary to kick off the installation process, allowing the guest to fetch the rest of the OS distribution as needed. PXE booting, and importing an existing disk image (thus skipping the install phase) are also supported."]}),"\n",(0,s.jsxs)(n.p,{children:["To see more details about virt-install options, please visit ",(0,s.jsx)(n.a,{href:"https://linux.die.net/man/1/virt-install",children:"https://linux.die.net/man/1/virt-install"}),"\nTo see more details about virt-manager and the graphical interface, please visit ",(0,s.jsx)(n.a,{href:"https://virt-manager.org/",children:"https://virt-manager.org/"})]}),"\n",(0,s.jsx)(n.h1,{id:"image-based-process-step-by-step",children:"Image-based process step by step"}),"\n",(0,s.jsxs)(n.p,{children:["We have to create the image based and prepare the image with ignition and combustion files.\nBasically we will use the following documents as reference to create the image changing the base SLEMicro image to be downloaded (",(0,s.jsx)(n.strong,{children:"in this case will be SLE Micro x86_64"}),"):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Download the raw image file from the SUSE website at ",(0,s.jsx)(n.a,{href:"https://www.suse.com/download/sle-micro/",children:"https://www.suse.com/download/sle-micro/"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Select AMD64/Intel 64 architecture"}),"\n",(0,s.jsxs)(n.li,{children:["Look for the raw file (I.e.- ",(0,s.jsx)(n.code,{children:"SLE-Micro.x86_64-5.4.0-Default-GM.raw.xz"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE:"})," You need to have a valid user on the SUSE site to be able to download the file."]}),"\n",(0,s.jsx)(n.p,{children:"If you are trying to download to a remote server, you can use scp to copy that file to the server."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Access to ",(0,s.jsx)(n.a,{href:"https://scc.suse.com/",children:"SCC.suse.com"})," to generate a registration code"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Search for ",(0,s.jsx)(n.code,{children:"SUSE Linux Enterprise Micro"})," via the ",(0,s.jsx)(n.code,{children:"Products"})," menu, select the arch/version then copy and manually activate the registration code"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Butane, qemu-img and cdrtools installed (using zypper for example)"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" sudo zypper install butane qemu-tools xz mkisofs\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unzip the file"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"  xz -d SLE-Micro.x86_64-5.4.0-Default-GM.raw.xz \n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Resize the image file. In this example, to 30G"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:" qemu-img resize -f raw ~/PATH-TO-FILE/SLE-Micro.x86_64-5.4.0-Default-GM.raw 30G > /dev/null\n"})}),"\n",(0,s.jsx)(n.h2,{id:"convert-the-raw-image-to-qcow2",children:"Convert the raw image to qcow2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"qemu-img convert -O qcow2 SLE-Micro.x86_64-5.4.0-Default-GM.raw slemicro\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ignition--combustion-files",children:"Ignition & Combustion files"}),"\n",(0,s.jsx)(n.p,{children:"To automate the installation, we will leverage Butane, Ignition and\nCombustion as explained before:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a temporary folder to store the assets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"TMPDIR=$(mktemp -d)\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create the required folders for ignition and combustion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mkdir -p ${TMPDIR}/{combustion,ignition}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"config.fcc"})," butane config file as required. See the\nfollowing example to set a ",(0,s.jsx)(n.code,{children:"root"}),' password for the root user, and to\nconfigure the hostname to be "slemicro"\'']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'cat << \'EOF\' > ${TMPDIR}/config.fcc \nvariant: fcos \nversion: 1.4.0 \nstorage: \n  files: \n    - path: /etc/hostname \n      mode: 0644 \n      overwrite: true \n      contents: \n        inline: "slemicro" \npasswd: \n  users: \n   - name: root \n     password_hash: "$y$j9T$/t4THH10B7esLiIVBROsE.$G1lyxfy/MoFVOrfXSnWAUq70Tf3mjfZBIe18koGOuXB" \nEOF\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a script combustion file as required. See the following\nexample to register the SLE Micro instance to SUSE's SCC (use your\nown email/regcode) and to create a ",(0,s.jsx)(n.code,{children:"/etc/issue.d/combustion"})," file"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'cat << EOF > ${TMPDIR}/combustion/script  \n#!/bin/bash \n# combustion: network \n\n# Redirect output to the console \nexec > >(exec tee -a /dev/tty0) 2>&1\n\n# Set hostname at combustion phase for SUSEConnect\nhostname slemicro\n\n# Registration \nif ! which SUSEConnect > /dev/null 2>&1; then \n    zypper --non-interactive install suseconnect-ng \nfi \n\nSUSEConnect --email foobar@suse.com --url https://scc.suse.com --regcode YOURCODE \n\n# Leave a marker \necho "Configured with combustion" > /etc/issue.d/combustion \nEOF\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Convert the butane config to ignition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"butane -p -o ${TMPDIR}/ignition/config.ign ${TMPDIR}/config.fcc\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create an ISO file. It is requried for both ignition and combustion\nto work that the ISO is labeled as ",(0,s.jsx)(n.code,{children:"ignition"})," (hence the -V\nparameter)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mkisofs -full-iso9660-filenames -o ignition-and-combustion.iso -V ignition ${TMPDIR}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optional:"})," Remove the temporary folder"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"rm -Rf ${TMPDIR}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"create-the-vm",children:"Create the VM"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"virt-install --name MyVM --memory 4096 --vcpus 4 --disk ./slemicro --import --cdrom ./ignition-and-combustion.iso --network default --osinfo detect=on,name=sle-unknown\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NOTES:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Pass the ",(0,s.jsx)(n.code,{children:"--noautoconsole"})," flag in case your console hangs on the installation, this will allow you to run other commands without CTRL-C interrupt"]}),"\n",(0,s.jsxs)(n.li,{children:["Pass the ",(0,s.jsx)(n.code,{children:"--debug"})," flag if you run into issues"]}),"\n",(0,s.jsx)(n.li,{children:"If you run into an issue and you need to restart, or if you get an error saying that MyVM is already running, run this command:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:" virsh destroy MyVM ; virsh undefine MyVM\n"})}),"\n",(0,s.jsx)(n.p,{children:"After a couple of seconds, the VM will boot up and will configure itself\nusing the ignition and combustion scripts, including registering itself\nto SCC"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"virsh list\n Id   Nombre          State\n----------------------------------\n 14   MyVM          running\n"})}),"\n",(0,s.jsx)(n.h2,{id:"access-to-the-vm",children:"Access to the vm"}),"\n",(0,s.jsx)(n.p,{children:"You can access to the VM using virsh console:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"virsh console MyVM\n\nConnected to domain MyVM\n"})}),"\n",(0,s.jsx)(n.p,{children:"or using ssh directly and the user set in the ignition file (in this case root)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"virsh domifaddr MyVM\n Nombre     MAC address          Protocol     Address\n-------------------------------------------------------------------------------\n vnet14     52:54:00:f0:be:e5    ipv4         192.168.122.221/24\n \nssh root@192.168.122.221\n"})}),"\n",(0,s.jsx)(n.h2,{id:"delete-the-vm",children:"Delete the VM"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"virsh destroy MyVM ; virsh undefine MyVM\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>r});var s=i(7294);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);