"use strict";(self.webpackChunksuse_edge_docs=self.webpackChunksuse_edge_docs||[]).push([[5662],{9154:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var s=t(5893),l=t(1151);const a={sidebar_position:4,title:"MetalLB on K3s"},i="Intro",r={id:"quickstart/metallb",title:"MetalLB on K3s",description:"MetalLB",source:"@site/docs/quickstart/metallb.md",sourceDirName:"quickstart",slug:"/quickstart/metallb",permalink:"/docs/quickstart/metallb",draft:!1,unlisted:!1,editUrl:"https://github.com/suse-edge/suse-edge.github.io/tree/main/docs/quickstart/metallb.md",tags:[],version:"current",lastUpdatedBy:"Eduardo M\xednguez",lastUpdatedAt:1700502039,formattedLastUpdatedAt:"Nov 20, 2023",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"MetalLB on K3s"},sidebar:"docs",previous:{title:"Elemental on OSX on Apple Silicon (UTM)",permalink:"/docs/quickstart/elemental-utm-aarch64"},next:{title:"MetalLB Service in front of the Kubernetes API server",permalink:"/docs/quickstart/metallb-kube-api"}},o={},d=[{value:"MetalLB",id:"metallb",level:2},{value:"MetalLB on K3s (using L2)",id:"metallb-on-k3s-using-l2",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Traefik and MetalLB",id:"traefik-and-metallb",level:3},{value:"Usage",id:"usage",level:3},{value:"Ingress with MetalLB",id:"ingress-with-metallb",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"intro",children:"Intro"}),"\n",(0,s.jsx)(n.h2,{id:"metallb",children:"MetalLB"}),"\n",(0,s.jsxs)(n.p,{children:["Via the ",(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/",children:"official docs"}),":"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"MetalLB is a load-balancer implementation for bare metal Kubernetes clusters, using standard routing protocols."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Network load balancers in bare-metal environments are much more difficult than in cloud environments. Instead of performing an API call, it involves having either network appliances or a combination of a load balancer + VIP to handle HA (or a single node load balancer SPOF). Those are not easily automated so having a K8s deployment where things go up and down all the time is challenging."}),"\n",(0,s.jsxs)(n.p,{children:["MetalLB tries to ",(0,s.jsx)(n.em,{children:"fix"})," this by leveraging the K8s model to create ",(0,s.jsx)(n.code,{children:"LoadBalancer"})," type of services like if they were in the cloud... but on bare-metal."]}),"\n",(0,s.jsxs)(n.p,{children:["There are two different approaches, via ",(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/concepts/layer2/",children:"L2 mode"})," (using ARP ",(0,s.jsx)(n.em,{children:"tricks"}),") or via ",(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/concepts/bgp/",children:"BGP"}),". Mainly L2 doesn't need any special network gear but BGP is in general ",(0,s.jsx)(n.em,{children:"better"}),". It depends on the use cases."]}),"\n",(0,s.jsx)(n.h2,{id:"metallb-on-k3s-using-l2",children:"MetalLB on K3s (using L2)"}),"\n",(0,s.jsx)(n.p,{children:"In this quickstart, L2 mode will be used so it means we don't need any special network gear but just a couple of free IPs in our network range, ideally outside of the DHCP pool so they are not assigned."}),"\n",(0,s.jsxs)(n.p,{children:["In this example, our DHCP pool is ",(0,s.jsx)(n.code,{children:"192.168.122.100-192.168.122.200"})," (yes, 3 IPs, see ",(0,s.jsx)(n.a,{href:"#traefik-and-metallb",children:"Traefik and MetalLB"})," for the reason of the extra IP) for a ",(0,s.jsx)(n.code,{children:"192.168.122.0/24"})," network so anything outside this range is ok (besides the gateway and other hosts that can be already running!)"]}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A K3s cluster where MetalLB is going to be deployed. Hint, you can use ",(0,s.jsx)(n.a,{href:"https://suse-edge.github.io/quickstart/k3s-on-slemicro",children:"the K3s on SLE Micro guide"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26a0\ufe0f"," K3S comes with its own service load balancer named Klipper. You ",(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/configuration/k3s/",children:"need to disable it in order to run MetalLB"}),". To disable Klipper, K3s needs to be installed using the ",(0,s.jsx)(n.code,{children:"--disable=servicelb"})," flag."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Helm"}),"\n",(0,s.jsxs)(n.li,{children:["A couple of free IPs in our network range. In this case ",(0,s.jsx)(n.code,{children:"192.168.122.10-192.168.122.12"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"deployment",children:"Deployment"}),"\n",(0,s.jsx)(n.p,{children:"MetalLB leverages Helm (and other methods as well), so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"helm repo add metallb https://metallb.github.io/metallb\nhelm install --create-namespace -n metallb-system metallb metallb/metallb\n\nwhile ! kubectl wait --for condition=ready -n metallb-system $(kubectl get pods -n metallb-system -l app.kubernetes.io/component=controller -o name) --timeout=10s; do sleep 2 ; done\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["At this point, the installation is completed. Now it is time to ",(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/configuration/",children:"configure"})," using our example values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"cat <<-EOF | kubectl apply -f -\napiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: ip-pool\n  namespace: metallb-system\nspec:\n  addresses:\n  - 192.168.122.10/32\n  - 192.168.122.11/32\n  - 192.168.122.12/32\nEOF\n\ncat <<-EOF | kubectl apply -f -\napiVersion: metallb.io/v1beta1\nkind: L2Advertisement\nmetadata:\n  name: ip-pool-l2-adv\n  namespace: metallb-system\nspec:\n  ipAddressPools:\n  - ip-pool\nEOF\n"})}),"\n",(0,s.jsx)(n.p,{children:"At this point, it is ready to be used. There are a lot of things you can customize for L2 mode such as:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/usage/#ipv6-and-dual-stack-services",children:"IPv6 And Dual Stack Services"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/configuration/_advanced_ipaddresspool_configuration/#controlling-automatic-address-allocation",children:"Control automatic address allocation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/configuration/_advanced_ipaddresspool_configuration/#reduce-scope-of-address-allocation-to-specific-namespace-and-service",children:"Reduce the scope of address allocation to specific Namespaces and services"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/configuration/_advanced_l2_configuration/#limiting-the-set-of-nodes-where-the-service-can-be-announced-from",children:"Limiting the set of nodes where the service can be announced from"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/configuration/_advanced_l2_configuration/#specify-network-interfaces-that-lb-ip-can-be-announced-from",children:"Specify network interfaces that LB IP can be announce from"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["And a lot more for ",(0,s.jsx)(n.a,{href:"https://metallb.universe.tf/configuration/_advanced_bgp_configuration/",children:"BGP"})]}),"\n",(0,s.jsx)(n.h3,{id:"traefik-and-metallb",children:"Traefik and MetalLB"}),"\n",(0,s.jsxs)(n.p,{children:["Traefik is deployed by default with K3s (",(0,s.jsx)(n.a,{href:"https://docs.k3s.io/networking#traefik-ingress-controller",children:"it can be disabled"})," with ",(0,s.jsx)(n.code,{children:"--disable=traefik"}),") and it is by default exposed as ",(0,s.jsx)(n.code,{children:"LoadBalancer"})," (to be used with Klipper). However, as Klipper needs to be disabled, Traefik service for ingress is still a ",(0,s.jsx)(n.code,{children:"LoadBalancer"})," type... so at the moment of deploying MetalLB the first IP will be assigned automatically to Traefik Ingress."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Before deploying MetalLB\nkubectl get svc -n kube-system traefik\nNAME      TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE\ntraefik   LoadBalancer   10.43.44.113   <pending>     80:31093/TCP,443:32095/TCP   28s\n# After deploying MetalLB\nkubectl get svc -n kube-system traefik\nNAME      TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)                      AGE\ntraefik   LoadBalancer   10.43.44.113   192.168.122.10   80:31093/TCP,443:32095/TCP   3m10s\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We will leverage this ",(0,s.jsx)(n.a,{href:"#ingress-with-metallb",children:"later"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"Let's create an example deployment:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'cat <<- EOF | kubectl apply -f -\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: hello-kubernetes\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: hello-kubernetes\n  namespace: hello-kubernetes\n  labels:\n    app.kubernetes.io/name: hello-kubernetes\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-kubernetes\n  namespace: hello-kubernetes\n  labels:\n    app.kubernetes.io/name: hello-kubernetes\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: hello-kubernetes\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: hello-kubernetes\n    spec:\n      serviceAccountName: hello-kubernetes\n      containers:\n        - name: hello-kubernetes\n          image: "paulbouwer/hello-kubernetes:1.10"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - name: http\n              containerPort: 8080\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /\n              port: http\n          env:\n          - name: HANDLER_PATH_PREFIX\n            value: ""\n          - name: RENDER_PATH_PREFIX\n            value: ""\n          - name: KUBERNETES_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n          - name: KUBERNETES_POD_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n          - name: KUBERNETES_NODE_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: spec.nodeName\n          - name: CONTAINER_IMAGE\n            value: "paulbouwer/hello-kubernetes:1.10"\nEOF\n'})}),"\n",(0,s.jsx)(n.p,{children:"And finally, the service:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"cat <<- EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-kubernetes\n  namespace: hello-kubernetes\n  labels:\n    app.kubernetes.io/name: hello-kubernetes\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: hello-kubernetes\nEOF\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's see it in action:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'kubectl get svc -n hello-kubernetes\nNAME               TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)        AGE\nhello-kubernetes   LoadBalancer   10.43.127.75   192.168.122.11   80:31461/TCP   8s\n\ncurl http://192.168.122.11\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello Kubernetes!</title>\n    <link rel="stylesheet" type="text/css" href="/css/main.css">\n    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Ubuntu:300" >\n</head>\n<body>\n\n  <div class="main">\n    <img src="/images/kubernetes.png"/>\n    <div class="content">\n      <div id="message">\n  Hello world!\n</div>\n<div id="info">\n  <table>\n    <tr>\n      <th>namespace:</th>\n      <td>hello-kubernetes</td>\n    </tr>\n    <tr>\n      <th>pod:</th>\n      <td>hello-kubernetes-7c8575c848-2c6ps</td>\n    </tr>\n    <tr>\n      <th>node:</th>\n      <td>allinone (Linux 5.14.21-150400.24.46-default)</td>\n    </tr>\n  </table>\n</div>\n<div id="footer">\n  paulbouwer/hello-kubernetes:1.10 (linux/amd64)\n</div>\n    </div>\n  </div>\n\n</body>\n</html>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"ingress-with-metallb",children:"Ingress with MetalLB"}),"\n",(0,s.jsxs)(n.p,{children:["As Traefik is already serving as an ingress controller, we can expose any http/https traffic via an ",(0,s.jsx)(n.code,{children:"Ingress"})," object such as:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'IP=$(kubectl get svc -n kube-system traefik -o jsonpath="{.status.loadBalancer.ingress[0].ip}")\ncat <<- EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: hello-kubernetes-ingress\n  namespace: hello-kubernetes\nspec:\n  rules:\n  - host: hellok3s.${IP}.sslip.io\n    http:\n      paths:\n        - path: "/"\n          pathType: Prefix\n          backend:\n            service:\n              name: hello-kubernetes\n              port:\n                name: http\nEOF\n'})}),"\n",(0,s.jsx)(n.p,{children:"And then:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'curl http://hellok3s.${IP}.sslip.io\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello Kubernetes!</title>\n    <link rel="stylesheet" type="text/css" href="/css/main.css">\n    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Ubuntu:300" >\n</head>\n<body>\n\n  <div class="main">\n    <img src="/images/kubernetes.png"/>\n    <div class="content">\n      <div id="message">\n  Hello world!\n</div>\n<div id="info">\n  <table>\n    <tr>\n      <th>namespace:</th>\n      <td>hello-kubernetes</td>\n    </tr>\n    <tr>\n      <th>pod:</th>\n      <td>hello-kubernetes-7c8575c848-fvqm2</td>\n    </tr>\n    <tr>\n      <th>node:</th>\n      <td>allinone (Linux 5.14.21-150400.24.46-default)</td>\n    </tr>\n  </table>\n</div>\n<div id="footer">\n  paulbouwer/hello-kubernetes:1.10 (linux/amd64)\n</div>\n    </div>\n  </div>\n\n</body>\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Also to verify that MetalLB is working correctly ",(0,s.jsx)(n.code,{children:"arping"})," can be used as:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"arping hellok3s.${IP}.sslip.io"})}),"\n",(0,s.jsx)(n.p,{children:"Expected result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"ARPING 192.168.64.210\n60 bytes from 92:12:36:00:d3:58 (192.168.64.210): index=0 time=1.169 msec\n60 bytes from 92:12:36:00:d3:58 (192.168.64.210): index=1 time=2.992 msec\n60 bytes from 92:12:36:00:d3:58 (192.168.64.210): index=2 time=2.884 msec\n"})}),"\n",(0,s.jsx)(n.p,{children:"In the example above, the traffic flows as follows:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"hellok3s.${IP}.sslip.io"})," is resolved to the actual IP."]}),"\n",(0,s.jsxs)(n.li,{children:["Then the traffic is handled by the ",(0,s.jsx)(n.code,{children:"metallb-speaker"})," pod."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"metallb-speaker"})," redirects the traffic to the ",(0,s.jsx)(n.code,{children:"traefik"})," controller."]}),"\n",(0,s.jsxs)(n.li,{children:["Finally Traefik forwards the request to the ",(0,s.jsx)(n.code,{children:"hello-kubernetes"})," Service."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>i});var s=t(7294);const l={},a=s.createContext(l);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);